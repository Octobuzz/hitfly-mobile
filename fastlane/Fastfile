# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
update_fastlane

default_platform(:ios)

APP_NAME = "hitfly"

platform :ios do
  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do
    match(type: 'development', readonly: true)
    match(type: 'appstore', readonly: true)
  end

  IOS_PROJECT = "./ios/#{APP_NAME}.xcodeproj"
  IOS_WORKSPACE = "./ios/#{APP_NAME}.xcworkspace"

  desc 'Build the iOS application.'
  private_lane :build do
    certificates
    increment_build_number(xcodeproj: IOS_PROJECT, build_number: latest_testflight_build_number + 1)
    # if using workspace (e.g Pods) else use gym(project: IOS_PROJECT)
    gym(workspace: IOS_WORKSPACE, clean: true, silent: true)
  end

  desc 'Ship to Testflight.'
  lane :beta do
    begin
      notification(subtitle: 'iOS', message: "#{APP_NAME} Start Building")

      build
      notification(subtitle: 'iOS', message: "#{APP_NAME} Finished Building")

      IOS_IPA = "#{APP_NAME}.ipa"
      pilot(ipa: IOS_IPA)
      notification(subtitle: 'iOS', message: "#{APP_NAME} Uploaded to TestFlight")

      clean_build_artifacts
      notification(subtitle: 'iOS', message: "#{APP_NAME} Cleaned build artifacts")

      git_pull
      commit_version_bump(xcodeproj: IOS_PROJECT, message: 'Change build version iOS')
      push_to_git_remote
      notification(subtitle: 'iOS', message: "#{APP_NAME} Commited and Pushed to VCS")

      notification(subtitle: 'iOS', message: "Lane :beta finished")
    rescue => error
      notification(subtitle: 'iOS', message: "Lane :beta failed")
      raise error
    end
  end
end

FIREBASE_ANDROID_ID = "1:564025817349:android:d4dc71183d0087bc75df6c"

platform :android do
 
  ANDROID_PROJECT = './android/'
  desc "Submit a new Beta Build to Firebase App Distribution"
  lane :beta do
    begin
      notification(subtitle: 'Android', message: "#{APP_NAME} Start Building")
      increment_version_code(
        gradle_file_path: "#{ANDROID_PROJECT}app/build.gradle",
        app_folder_name:"#{ANDROID_PROJECT}app"
      )
      gradle(task: "clean assembleRelease", project_dir: ANDROID_PROJECT)
      notification(subtitle: 'Android', message: "#{APP_NAME} Finished Building")

      firebase_app_distribution(
          app: FIREBASE_ANDROID_ID,
          groups: "qa",
          firebase_cli_path: "/usr/local/bin/firebase"
      )
      notification(subtitle: 'Android', message: "#{APP_NAME} Uploaded to Firebase App Distribution")
        
      GRADLE_FILE = "#{ANDROID_PROJECT}app/build.gradle"
      APK_LOCATION = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
      APK_DESTINATION = "~/Desktop/#{APP_NAME}.apk"   
      VERSION_CODE = android_get_version_code(gradle_file: GRADLE_FILE)
      VERSION_NAME = android_get_version_name(gradle_file: GRADLE_FILE)
      VERSION_NAME = VERSION_NAME.gsub(/\./, "_")
      APK_DESTINATION = "~/Desktop/#{APP_NAME}_v-#{VERSION_NAME}b-#{VERSION_CODE}.apk"      
      sh("cp #{APK_LOCATION} #{APK_DESTINATION}")
      notification(subtitle: 'Android', message: "#{APP_NAME} Copied to #{APK_DESTINATION}")

      git_pull
      git_commit(path: GRADLE_FILE, message: "Change build version Android")
      push_to_git_remote
      notification(subtitle: 'Android', message: "#{APP_NAME} Commited and Pushed to VCS")

      notification(subtitle: 'Android', message: "Lane :beta finished")
    rescue => error
      notification(subtitle: 'Android', message: "Lane :beta failed")
      raise error
    end
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end

