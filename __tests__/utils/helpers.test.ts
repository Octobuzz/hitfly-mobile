import {
  getNameForTrack,
  getNameForCount,
  formatTracksCount,
  formatTimeDurationForTrack,
  formatTimeDurationForPlaylist,
  getNextBonusProgramHumanReadable,
  getBonusProgramLevelHumanReadable,
} from 'src/helpers'
import { BonusProgramLevel } from 'src/apollo'

describe('getBonusProgramLevelHumanReadable', () => {
  it('LEVEL_NOVICE should be: üë∂üèª –ù–æ–≤–∏—á–æ–∫', () => {
    expect(
      getBonusProgramLevelHumanReadable(BonusProgramLevel.LEVEL_NOVICE),
    ).toBe('üë∂üèª –ù–æ–≤–∏—á–æ–∫')
  })

  it('LEVEL_AMATEUR should be: üé§ –õ—é–±–∏—Ç–µ–ª—å', () => {
    expect(
      getBonusProgramLevelHumanReadable(BonusProgramLevel.LEVEL_AMATEUR),
    ).toBe('üé§ –õ—é–±–∏—Ç–µ–ª—å')
  })

  it('LEVEL_CONNOISSEUR_OF_THE_GENRE should be: üé∏ –ó–Ω–∞—Ç–æ–∫ –∂–∞–Ω—Ä–∞', () => {
    expect(
      getBonusProgramLevelHumanReadable(
        BonusProgramLevel.LEVEL_CONNOISSEUR_OF_THE_GENRE,
      ),
    ).toBe('üé∏ –ó–Ω–∞—Ç–æ–∫ –∂–∞–Ω—Ä–∞')
  })

  it('LEVEL_SUPER_MUSIC_LOVER should be: üéß –°—É–ø–µ—Ä –º–µ–ª–æ–º–∞–Ω', () => {
    expect(
      getBonusProgramLevelHumanReadable(
        BonusProgramLevel.LEVEL_SUPER_MUSIC_LOVER,
      ),
    ).toBe('üéß –°—É–ø–µ—Ä –º–µ–ª–æ–º–∞–Ω')
  })
})

describe('getNextBonusProgramHumanReadable', () => {
  it('LEVEL_NOVICE should be: üé§ –õ—é–±–∏—Ç–µ–ª—å', () => {
    expect(
      getNextBonusProgramHumanReadable(BonusProgramLevel.LEVEL_NOVICE),
    ).toBe('üé§ –õ—é–±–∏—Ç–µ–ª—å')
  })

  it('LEVEL_AMATEUR should be: üé∏ –ó–Ω–∞—Ç–æ–∫ –∂–∞–Ω—Ä–∞', () => {
    expect(
      getNextBonusProgramHumanReadable(BonusProgramLevel.LEVEL_AMATEUR),
    ).toBe('üé∏ –ó–Ω–∞—Ç–æ–∫ –∂–∞–Ω—Ä–∞')
  })

  it('LEVEL_CONNOISSEUR_OF_THE_GENRE should be: üéß –°—É–ø–µ—Ä –º–µ–ª–æ–º–∞–Ω', () => {
    expect(
      getNextBonusProgramHumanReadable(
        BonusProgramLevel.LEVEL_CONNOISSEUR_OF_THE_GENRE,
      ),
    ).toBe('üéß –°—É–ø–µ—Ä –º–µ–ª–æ–º–∞–Ω')
  })

  it('LEVEL_SUPER_MUSIC_LOVER should be undefiend', () => {
    expect(
      getNextBonusProgramHumanReadable(
        BonusProgramLevel.LEVEL_SUPER_MUSIC_LOVER,
      ),
    ).toBeUndefined()
  })
})

describe('getNameForCount', () => {
  it('should be: —á–∞—Å with count === 1', () => {
    expect(
      getNameForCount(
        {
          nominative: '—á–∞—Å',
          genitive: '—á–∞—Å–∞',
          genitiveMultiple: '—á–∞—Å–æ–≤',
        },
        1,
      ),
    ).toBe('—á–∞—Å')
  })
  it('should be: —á–∞—Å–∞ with count === 2', () => {
    expect(
      getNameForCount(
        {
          nominative: '—á–∞—Å',
          genitive: '—á–∞—Å–∞',
          genitiveMultiple: '—á–∞—Å–æ–≤',
        },
        2,
      ),
    ).toBe('—á–∞—Å–∞')
  })
  it('should be: —á–∞—Å–æ–≤ with count === 11', () => {
    expect(
      getNameForCount(
        {
          nominative: '—á–∞—Å',
          genitive: '—á–∞—Å–∞',
          genitiveMultiple: '—á–∞—Å–æ–≤',
        },
        11,
      ),
    ).toBe('—á–∞—Å–æ–≤')
  })
  it('should be: —á–∞—Å–æ–≤ with count === 100', () => {
    expect(
      getNameForCount(
        {
          nominative: '—á–∞—Å',
          genitive: '—á–∞—Å–∞',
          genitiveMultiple: '—á–∞—Å–æ–≤',
        },
        100,
      ),
    ).toBe('—á–∞—Å–æ–≤')
  })
})

describe('formatTracksCount', () => {
  it('should render string correctly with 10', () => {
    expect(formatTracksCount(10)).toBe(`${10} ${getNameForTrack(10)}`)
  })

  it('should render string correctly with -100', () => {
    expect(formatTracksCount(-100)).toBe(`${-100} ${getNameForTrack(-100)}`)
  })
})

describe('formatTimeDurationForTrack', () => {
  it('should be 0:10 with 10', () => {
    expect(formatTimeDurationForTrack(10)).toBe('0:10')
  })

  it('should be 26:40 with 1600', () => {
    expect(formatTimeDurationForTrack(1600)).toBe('26:40')
  })

  it('should be 2:46:40 with 10000', () => {
    expect(formatTimeDurationForTrack(10000)).toBe('2:46:40')
  })
})

describe('formatTimeDurationForPlaylist', () => {
  it('should be 6 –º–∏–Ω—É—Ç with 400', () => {
    expect(formatTimeDurationForPlaylist(400)).toBe('6 –º–∏–Ω—É—Ç')
  })
  it('should be 26 –º–∏–Ω—É—Ç with 1600', () => {
    expect(formatTimeDurationForPlaylist(1600)).toBe('26 –º–∏–Ω—É—Ç')
  })
  it('should be 2 —á–∞—Å–∞ 46 –º–∏–Ω—É—Ç with 10000', () => {
    expect(formatTimeDurationForPlaylist(10000)).toBe('2 —á–∞—Å–∞ 46 –º–∏–Ω—É—Ç')
  })
  it('should be 2 —á 46 –º 40 —Å with 10000 and {withSeconds: true, useShortSyntax: true}', () => {
    expect(
      formatTimeDurationForPlaylist(10000, {
        withSeconds: true,
        useShortSyntax: true,
      }),
    ).toBe('2 —á 46 –º 40 —Å')
  })
  it('should be 2 —á 46 –º with 10000 and {withSeconds: false, useShortSyntax: true}', () => {
    expect(
      formatTimeDurationForPlaylist(10000, {
        withSeconds: false,
        useShortSyntax: true,
      }),
    ).toBe('2 —á 46 –º')
  })
  it('should be 2 —á–∞—Å–∞ 46 –º–∏–Ω—É—Ç with 10000 and {withSeconds: false, useShortSyntax: false}', () => {
    expect(
      formatTimeDurationForPlaylist(10000, {
        withSeconds: false,
        useShortSyntax: false,
      }),
    ).toBe('2 —á–∞—Å–∞ 46 –º–∏–Ω—É—Ç')
  })
  it('should be 2 —á–∞—Å–æ–≤ 46 –º–∏–Ω—É—Ç 40 —Å–µ–∫—É–Ω–¥ with 10000 and {withSeconds: true, useShortSyntax: false}', () => {
    expect(
      formatTimeDurationForPlaylist(10000, {
        withSeconds: true,
        useShortSyntax: false,
      }),
    ).toBe('2 —á–∞—Å–∞ 46 –º–∏–Ω—É—Ç 40 —Å–µ–∫—É–Ω–¥')
  })
})
